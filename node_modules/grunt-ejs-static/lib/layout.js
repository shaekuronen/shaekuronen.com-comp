
module.exports = exports = {

  // test for path_to_layout value for key in data.json
  path_to_layout_validator: function(key, data_object, ejs_static) {

    var path_to_layout = ejs_static.path_to_layout_generator(key, data_object, ejs_static);

    if (path_to_layout) {
      ejs_static.create_files_router(key, data_object, path_to_layout, ejs_static);
    } else {
      ejs_static.grunt.log.debug('file NOT CREATED for key: ' + key);
    }

  },
  // end test for path_to_layout value for key in data.json

  // generate path to layout
  path_to_layout_generator: function(key, data_object, ejs_static) {

    // if path_to_layout exists
    if (data_object[key].path_to_layout) {

      return data_object[key].path_to_layout;

    // if a layouts dir is specified
    } else if (ejs_static.options.path_to_layouts) {

      return ejs_static.search_layouts_dir(key, ejs_static);

    } else {
      ejs_static.grunt.fail.warn('A value for path_to_layout is required, please specify in data file for key: ' + key);
    }      

  },
  // end generate path to layout

  // search the layouts dir for a dir or file that matches key
  search_layouts_dir: function(key, ejs_static) {

    var search_pattern1 = ejs_static.path.join(ejs_static.options.path_to_layouts, '**', key + '.ejs');
    ejs_static.grunt.log.debug('search pattern1 is ' + search_pattern1);

    var search_pattern2 = ejs_static.path.join(ejs_static.options.path_to_layouts, '**', key, 'index' + ejs_static.options.file_extension);
    ejs_static.grunt.log.debug('search pattern2 is ' + search_pattern2);

    var search_pattern3 = ejs_static.path.join(ejs_static.options.path_to_layouts, '**', key, 'index.ejs');
    ejs_static.grunt.log.debug('search pattern3 is ' + search_pattern3);

    var path_to_layout = ejs_static.grunt.file.expand(search_pattern1, search_pattern2, search_pattern3);

    // if exactly one path to layout is returned, return that path
    if (path_to_layout.length === 1) {

      ejs_static.grunt.log.debug('PATH TO LAYOUT is ' + path_to_layout);
      return path_to_layout;

    // if more than one path to layout is returned, throw error
    } else if (path_to_layout.length > 1) {

      var multiple_layout_paths = "";

      Object.keys(path_to_layout).forEach(function(key) {
        multiple_layout_paths += path_to_layout[key] + '\n';
      });

      ejs_static.grunt.fail.warn('More than 1 path to layout file was not found for key: ' + key + 
                      '\nThe paths found were: \n' + multiple_layout_paths + 
                      '\nResolve in the project dir structure and/or data file\n');

    // if no path to layout is returned, throw error
    } else {
      ejs_static.grunt.fail.warn('path to layout file was not found for key: ' + key);
    }

  },
  // end search the layouts dir for a dir or file that matches key

  // prepare layout file
  prepare_layout: function(key, data_object, path_to_layout, ejs_static) {

    // get the layout
    var layout = ejs_static.grunt.file.read(path_to_layout);

    return layout;      

  }
  // end prepare layout file

};