
module.exports = exports = {

  create_file: function(key, data_object, path_to_layout, ejs_static) {

    var grunt = ejs_static.grunt;

    create_file_router(key, data_object, path_to_layout);

    // PRIVATE FUNCTIONS
    // 

    // create dir structure and render templates as html
    function create_file_router(key, data_object, path_to_layout) {

      // if the page is the index page specified in ejs_static options
      if ( key === ejs_static.options.index_page ) {
        
        create_index_file(key, data_object, path_to_layout);

      // if the page is a category page, build the category dir structure
      } else if ( data_object[key].hasOwnProperty('category') ) {
        
        create_category_file(key, data_object, path_to_layout);

      // the page has no category and is therefore rendered at root level
      } else if ( !data_object[key].hasOwnProperty('category') ) {

        create_root_level_file(key, data_object, path_to_layout);

      } else {
        grunt.log.error('error in create_files_router() in ejs_static.js');
      }

    }
    // end create dir structure and render templates as html

    // create the index.html file specified in options
    function create_index_file(key, data_object, path_to_layout) {

      grunt.log.debug('the file is the index page');

      // create path to the rendered html file
      var path_to_file = ejs_static.path.join(ejs_static.options.dest, 'index' + ejs_static.options.file_extension),
          path_to_file = underscores_to_dashes(path_to_file);

      grunt.log.debug('path to html file is ' + path_to_file);

      // render the template
      render_template(key, data_object, path_to_file, path_to_layout); 

    }
    // end create the index.html file specified in options

    // create a file that is in a category
    function create_category_file(key, data_object, path_to_layout) {

      grunt.log.debug('the file is in a category');

      // if the parent_dirs option is true
      if (ejs_static.options.parent_dirs) {

        // create the file as an index.html file inside a parent directory
        var path_to_file = ejs_static.path.join(ejs_static.options.dest, data_object[key].category, key, 'index' + ejs_static.options.file_extension),
            path_to_file = underscores_to_dashes(path_to_file);

        grunt.log.debug('path to html file is ' + path_to_file);           

      } else {

        // create the file with the key as the file name
        var path_to_file = ejs_static.path.join(ejs_static.options.dest, data_object[key].category, key + ejs_static.options.file_extension),
            path_to_file = underscores_to_dashes(path_to_file);

        grunt.log.debug('path to html file is ' + path_to_file); 

      }

      // render the template
      render_template(key, data_object, path_to_file, path_to_layout); 

    }
    // end create a file that is in a category

    // create a file at root level
    function create_root_level_file(key, data_object, path_to_layout) {

      grunt.log.debug('the page has no category');

      // if the parent_dirs option is true
      if (ejs_static.options.parent_dirs) {

        // create path to the rendered html file
        var path_to_file = ejs_static.path.join(ejs_static.options.dest, key, 'index' + ejs_static.options.file_extension),
            path_to_file = underscores_to_dashes(path_to_file);  

        grunt.log.debug('path to html file is ' + path_to_file);        

      } else {

        // create the file with the key as the file name
        var path_to_file = ejs_static.path.join(ejs_static.options.dest, key + ejs_static.options.file_extension),
            path_to_file = underscores_to_dashes(path_to_file, ejs_static);

        grunt.log.debug('path to html file is ' + path_to_file); 

      }

      // render the template
      render_template(key, data_object, path_to_file, path_to_layout); 

    }
    // end create a file at root level

    // make file name url ready by replacing underscores with dashes
    function underscores_to_dashes(item) {

      // if the underscores_to_dashes option is true
      if (ejs_static.options.underscores_to_dashes) {

        var item = item.replace(/_/g, "-");
        grunt.log.debug('underscores_to_dashes was set to true and processed ' + item);
        return item;

      } else {
        return item;
      }

    }
    // end make file name url ready by replacing underscores with dashes

    // render the template
    function render_template(key, data_object, path_to_file, path_to_layout) {

      // prepare the layout
      var prepped_layout = ejs_static.prepare_layout(key, data_object, path_to_layout, ejs_static);

      // prepare the template
      var prepped_template = ejs_static.prepare_template(prepped_layout, path_to_file, ejs_static);

      // prepare the data
      var prepped_data = ejs_static.prepare_data(key, data_object, path_to_layout, ejs_static); 

      // render the template as html
      var the_rendered_template = ejs_static.ejs.render(prepped_template, prepped_data);
      grunt.log.debug('Created a rendered template using ' + path_to_file);

      // write the compiled template to the destination directory
      grunt.file.write(path_to_file, the_rendered_template);
      grunt.log.debug('Rendered HTML to ' + path_to_file);

    }
    // end render the template

    // 
    // END PRIVATE FUNCTIONS

  }

};