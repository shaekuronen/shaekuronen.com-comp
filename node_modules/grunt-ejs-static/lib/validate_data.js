
var grunt = require('grunt');
var path = require('path');

module.exports = exports = {

  // validate data before rendering
  validate_data: function(options, ejs_static) {

    console.log('validate_data(): happened');

    grunt.log.debug('call() worked');

    var util = require('util');
    console.log('EJS STATIC IS');
    console.log(util.inspect(ejs_static, false, null));

    data_validator();

    // PRIVATE FUNCTIONS
    // 

    function data_validator() {

      grunt.log.debug('data_validator(): happened');

      // get data specified in ejs_static options
      if (typeof options.path_to_data === 'string') {

        grunt.log.debug('data_validator(): typeof data.options worked');

        // get the data
        var data = grunt.file.readJSON(options.path_to_data);

        console.log(util.inspect(data, false, null));

        // parse the data
        parse_data_files(data);

        grunt.log.debug('Data successfully imported');
        
      } else {

        grunt.fail.warn('The path_to_data option is required, please specify in Gruntfile');
        return false;

      }
      // end get data specified in ejs_static options

    }

    // iterate through items in data file
    // http://stackoverflow.com/questions/7440001/iterate-over-object-keys-in-node-js
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
    function parse_data_files(data_object) {

      Object.keys(data_object).forEach(function(key) {

        path_to_layout_validator(key, data_object);

      });

    }
    // end iterate through items in data file

    // search the layouts dir for a dir or file that matches key
    function search_layouts_dir(key) {

      var search_pattern1 = path.join(options.path_to_layouts, '**', key + '.ejs');
      grunt.log.debug('search pattern1 is ' + search_pattern1);

      var search_pattern2 = path.join(options.path_to_layouts, '**', key, 'index' + options.file_extension);
      grunt.log.debug('search pattern2 is ' + search_pattern2);

      var search_pattern3 = path.join(options.path_to_layouts, '**', key, 'index.ejs');
      grunt.log.debug('search pattern3 is ' + search_pattern3);

      var path_to_layout = grunt.file.expand(search_pattern1, search_pattern2, search_pattern3);

      // if exactly one path to layout is returned, return that path
      if (path_to_layout.length === 1) {

        grunt.log.debug('PATH TO LAYOUT is ' + path_to_layout);
        return path_to_layout;

      // if more than one path to layout is returned, throw error
      } else if (path_to_layout.length > 1) {

        var multiple_layout_paths = "";

        Object.keys(path_to_layout).forEach(function(key) {
          multiple_layout_paths += path_to_layout[key] + '\n';
        });

        grunt.fail.warn('More than 1 path to layout file was not found for key: ' + key + 
                        '\nThe paths found were: \n' + multiple_layout_paths + 
                        '\nResolve in the project dir structure and/or data file\n');

      // if no path to layout is returned, throw error
      } else {
        grunt.fail.warn('path to layout file was not found for key: ' + key);
      }

    }
    // end search the layouts dir for a dir or file that matches key

    // generate path to layout
    function path_to_layout_generator(key, data_object) {

      // if path_to_layout exists
      if (typeof data_object[key].path_to_layout === 'string') {

        return data_object[key].path_to_layout;

      // if a layouts dir is specified
      } else if (typeof options.path_to_layouts === 'string') {

        return search_layouts_dir(key, ejs_static);

      } else {
        grunt.fail.warn('A value for path_to_layout is required, please specify in data file for key: ' + key);
      }      

    }
    // end generate path to layout

    // test for path_to_layout value for key in data.json
    function path_to_layout_validator(key, data_object) {

      var path_to_layout = path_to_layout_generator(key, data_object);

      if (typeof path_to_layout !== 'undefined') {
        // data and layout have been validated, so start create file process
        ejs_static.create_file(key, data_object, path_to_layout, options, ejs_static);

        // var the_data = {
        //   the_key: key,
        //   the_data_object: data_object,
        //   the_path_to_layout: path_to_layout
        // }

        // return the_data;

      } else {
        grunt.log.debug('file NOT CREATED for key: ' + key);
      }

    }
    // end test for path_to_layout value for key in data.json

    // 
    // END PRIVATE FUNCTIONS

  }
  // end validate data before rendering

};

