/*
 * grunt-ejs-static
 * https://github.com/shaekuronen/grunt-ejs-static
 *
 * Copyright (c) 2013 Shae Kuronen
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function(grunt) {

  var ejs = require('ejs');
  var path = require('path');

  // Please see the Grunt documentation for more information regarding task
  // creation: http://gruntjs.com/creating-tasks
  grunt.registerMultiTask('ejs_static', 'Render EJS templates as static HTML.', function() {

    // Merge task-specific and/or target-specific options with these defaults.
    var options = this.options({
      punctuation: '.',
      separator: ', '
    });

    // get data specified in ejs_static options
    var data = grunt.file.readJSON(options.data);
    //  end get data specified in ejs_static options

    // get global data
    var global_data = data['_global'];
    // end get global data

    // create dir structure and render templates as html
    function create_html_files(data_object) {

      for (var key in data_object) {

        // if the key is global
        if ( key === "_global" ) {

          grunt.log.debug('the key is global');

        // if the page is the index page specified in ejs_static options 
        } else if ( key === options.index_page ) {
          
          grunt.log.debug('the file is the index page');

          // create path to the rendered html file
          var path_to_file = underscores_to_dashes( options.dest + '/index.html' );
          grunt.log.debug('path to html file is ' + path_to_file);

          // prepare the layout
          var prepped_layout = prepare_layout(key, data_object);

          // prepare the template
          var prepped_template = prepare_template(prepped_layout, path_to_file);

          // prepare the data
          var prepped_data = prepare_data(key, data_object, global_data); 

          // render the template
          render_template(prepped_template, path_to_file, prepped_data); 


        // if the page is a category page build the dir structure
        } else if ( data_object[key].hasOwnProperty('category') ) {
          
          grunt.log.debug('the file is in a category');

          // create path to the rendered html file
          var path_to_file = underscores_to_dashes( options.dest + '/' + data_object[key].category + '/' + key + '/index.html' );
          grunt.log.debug('path to html file is ' + path_to_file);

          // prepare the layout
          var prepped_layout = prepare_layout(key, data_object);

          // prepare the template
          var prepped_template = prepare_template(prepped_layout, path_to_file);

          // prepare the data
          var prepped_data = prepare_data(key, data_object, global_data); 

          // render the template
          render_template(prepped_template, path_to_file, prepped_data);  


        // the page has no category and is therefore root level
        } else {

          grunt.log.debug('the page has no category');

          // create path to the rendered html file
          var path_to_file = underscores_to_dashes( options.dest + '/' + key + '/index.html' );
          grunt.log.debug('path to html file is ' + path_to_file);

          // render the template
          new_render_template(key, data_object, path_to_file)  

        }

      } 

    }

    create_html_files(data);
    // end create dir structure and render templates as html

    // make file name url ready by replacing underscores with dashes
    function underscores_to_dashes(item) {

      item.replace(/_/g,"-");

      return item;

    }
    // end make file name url ready by replacing underscores with dashes

    // prepare layout file
    function prepare_layout(key, data_object) {

      // create path to layout file
      var path_to_layout = data_object[key].layout;
      grunt.log.debug('path to layout is ' + path_to_layout);

      // get the layout
      var layout = grunt.file.read(path_to_layout);

      return layout;      

    }
    // end prepare layout file

    // prepare template for rendering
    function prepare_template(layout, path_to_file) {

      // make the template file
      grunt.file.write(path_to_file, layout);
      grunt.log.debug('Created file at ' + path_to_file);

      // get the template
      var the_template = grunt.file.read(path_to_file);
      grunt.log.debug('Read template from ' + path_to_file);

      return the_template;

    }
    // end prepare template for rendering

    // prepare data for rendering
    function prepare_data(key, data_object, global_data) {

      // get the data for this file 
      var the_data = data_object[key];

      // add any global data to it
      if (global_data) {
        the_data.global = global_data;
        grunt.log.debug('Added global data to data object');
      }  

      // set the base dir for includes
      // tj uses filename to set base dir for includes in ejs.js
      // which make the include relative to the file
      // see resolveInclude() in visionmedia/ejs/lib/ejs.js
      var path_to_layout = data_object[key].layout;
      the_data.filename = path_to_layout;
      grunt.log.debug('THIS DATA FILENAME IS ' + the_data.filename);

      return the_data;      

    }
    // end prepare data for rendering

    // render the template
    function render_template(the_template, path_to_file, the_data) {

      // render the template as html
      var the_rendered_template = ejs.render(the_template, the_data);
      grunt.log.debug('Created a rendered template using ' + path_to_file);

      // write the compiled template to the destination directory
      grunt.file.write(path_to_file, the_rendered_template);
      grunt.log.debug('Rendered HTML to ' + path_to_file);

    }
    // end render the template

    // render the template
    function new_render_template(key, data_object, path_to_file) {

      // prepare the layout
      var prepped_layout = prepare_layout(key, data_object);

      // prepare the template
      var prepped_template = prepare_template(prepped_layout, path_to_file);

      // prepare the data
      var prepped_data = prepare_data(key, data_object, global_data); 

      // render the template as html
      var the_rendered_template = ejs.render(prepped_template, prepped_data);
      grunt.log.debug('Created a rendered template using ' + path_to_file);

      // write the compiled template to the destination directory
      grunt.file.write(path_to_file, the_rendered_template);
      grunt.log.debug('Rendered HTML to ' + path_to_file);

    }
    // end render the template

  });

};
