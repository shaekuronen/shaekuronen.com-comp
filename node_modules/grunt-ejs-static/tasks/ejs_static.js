/*
 * grunt-ejs-static
 * https://github.com/shaekuronen/grunt-ejs-static
 *
 * Copyright (c) 2013 Shae Kuronen
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function(grunt) {

  var ejs = require('ejs');
  var path = require('path');

  // Please see the Grunt documentation for more information regarding task
  // creation: http://gruntjs.com/creating-tasks

  grunt.registerMultiTask('ejs_static', 'Render EJS templates as static HTML.', function() {

    // Merge task-specific and/or target-specific options with these defaults.
    var options = this.options({
      punctuation: '.',
      separator: ', '
    });

    // DATA PROCESSING
    var data = process_data(options.data);

    // combine data in options.data into a single data object
    function process_data(unprocessed_data) {

      var the_data = {};

      for (var key in unprocessed_data) {

        // make sure property is not from the prototype
        if (unprocessed_data.hasOwnProperty(key)) {

          var this_data = grunt.file.readJSON(unprocessed_data[key]);

          the_data[key] = this_data;

        } else {

          grunt.log.debug(key + ' failed hasOwnProperty');

        }

      }

      return the_data;

    }

    grunt.log.writeln('');

    grunt.log.writeln('The processed data is ' + JSON.stringify(data) );

    grunt.log.writeln('');

    grunt.log.writeln(data.global.google_analytics);
    // END DATA PROCESSING

    // get the page names from routes.json data
    function create_html_files(data_object) {

      // create directory to put files into
      // http://gruntjs.com/api/grunt.file
      // TODO - specify mode? grunt defaults to 777
      grunt.file.mkdir(options.dest);

      // var the_pages = {};

      for (var key in data_object.routes) {

        // if the page is the index page specified in ejs_static options 
        if ( key === options.index_page ) {

          // get the path to the layout template 
          var path_to_layout = data_object.routes[key].layout;

          grunt.log.writeln('path to layout is ' + path_to_layout);

          // get the layout
          var layout = grunt.file.read(path_to_layout);

          // make the file
          grunt.file.write(options.dest + '/index.html', layout);


        // if the page is a category page build the dir structure
        } else if ( data_object.routes[key].hasOwnProperty('category') ) {
          
          grunt.log.writeln('the page has a category');

          // get the path to the layout template 
          var path_to_layout = data_object.routes[key].layout;

          grunt.log.writeln('path to layout is ' + path_to_layout);

          // get the layout
          var layout = grunt.file.read(path_to_layout);

          // convert any underscores into dashes
          var the_dir_name = key.replace(/_/g,"-"),
              the_category = data_object.routes[key].category.replace(/_/g,"-");

          // make the file
          grunt.file.write(options.dest + '/' + the_category + '/' + the_dir_name + '/index.html', layout);


        // the page is root level
        } else {

          grunt.log.writeln('the page has no category');

          // get the path to the layout template 
          var path_to_layout = data_object.routes[key].layout;

          grunt.log.writeln('path to layout is ' + path_to_layout);

          // get the layout
          var layout = grunt.file.read(path_to_layout);

          // convert any underscores into dashes
          var the_dir_name = key.replace(/_/g,"-");

          // make the file
          grunt.file.write(options.dest + '/' + the_dir_name + '/index.html', layout);

        }

      } 

    }

    var pages = create_html_files(data);



    // grunt.file.write(filepath, contents);






    // get the parent directory of layout manager 
    function get_parent_directory(path_to_file) {

        var tokens = [];

        tokens = path_to_file.split('/');

        // remove the index.html file from array
        var the_file = tokens.splice(-1, 2);

        var the_parent_directory = tokens.pop();

        return the_parent_directory;

    }
    // end get the parent directory of layout manager

    // get the path to the rendered template
    function get_path_to_rendered_template(path_to_file, path_to_layout, destination) {

      // remove src (options.src) from beginning of path
      var path_to_rendered_template = path_to_file.replace(path_to_layout, "");

      // add destination (options.dest) to beginning of path
      path_to_rendered_template = destination + path_to_rendered_template;

      return path_to_rendered_template;     
      
    }
    // end get the path to the rendered template

  });

};
