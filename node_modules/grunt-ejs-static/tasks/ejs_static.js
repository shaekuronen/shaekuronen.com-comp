/*
 * grunt-ejs-static
 * https://github.com/shaekuronen/grunt-ejs-static
 *
 * Copyright (c) 2013 Shae Kuronen
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function(grunt) {

  var ejs = require('ejs');
  var path = require('path');

  // Please see the Grunt documentation for more information regarding task
  // creation: http://gruntjs.com/creating-tasks

  grunt.registerMultiTask('ejs_static', 'Render EJS templates as static HTML.', function() {

    // Merge task-specific and/or target-specific options with these defaults.
    var options = this.options({
      punctuation: '.',
      separator: ', '
    });

    // DATA PROCESSING
    var data = grunt.file.readJSON(options.data);

    // pull in any site-wide variables like the name of the site or Google Analytics id.
    var global_data = data['_global'];


    // END DATA PROCESSING

    // CREATE DIR STRUCTURE AND HTML FILES
    // get the page names from data.json data
    function create_html_files(data_object) {

      // create destination directory to put files into
      // http://gruntjs.com/api/grunt.file
      // TODO - specify mode? grunt defaults to 777
      // grunt.file.mkdir(options.dest);

      for (var key in data_object) {

        // if the key is global
        if ( key === "_global" ) {

          grunt.log.debug('the key is global');

        // if the page is the index page specified in ejs_static options 
        } else if ( key === options.index_page ) {
          
          grunt.log.debug('the file is the index page');

          // get the path to the layout template 
          var path_to_layout = data_object[key].layout;
          grunt.log.debug('path to layout is ' + path_to_layout);

          // get the layout
          var layout = grunt.file.read(path_to_layout);

          // create the path to file
          var path_to_file = options.dest + '/index.html';

          // make the file
          grunt.file.write(path_to_file, layout);
          grunt.log.debug('Created file at ' + path_to_file);

          // get the data for this file 
          var the_data = data_object[key];

          // add any global data to it
          if (global_data) {
            the_data.global = global_data;
            grunt.log.debug('Added global data to data object');
          }          

          // render the template
          render_template(path_to_layout, path_to_file, the_data); 


        // if the page is a category page build the dir structure
        } else if ( data_object[key].hasOwnProperty('category') ) {
          
          grunt.log.debug('the file is in a category');

          // get the path to the layout template 
          var path_to_layout = data_object[key].layout;
          grunt.log.debug('path to layout is ' + path_to_layout);

          // get the layout
          var layout = grunt.file.read(path_to_layout);

          // convert any underscores into dashes
          var the_dir_name = key.replace(/_/g,"-"),
              the_category = data_object[key].category.replace(/_/g,"-");

          // create the path to file
          var path_to_file = options.dest + '/' + the_category + '/' + the_dir_name + '/index.html';

          // make the file
          grunt.file.write(path_to_file, layout);
          grunt.log.debug('Created file at ' + path_to_file);

          // get the data for this file 
          var the_data = data_object[key];

          // add any global data to it
          if (global_data) {
            the_data.global = global_data;
            grunt.log.debug('Added global data to data object');
          }          

          // render the template
          render_template(path_to_layout, path_to_file, the_data); 


        // the page is root level
        } else {

          grunt.log.debug('the page has no category');

          // get the path to the layout template 
          var path_to_layout = data_object[key].layout;
          grunt.log.debug('path to layout is ' + path_to_layout);

          // get the layout
          var layout = grunt.file.read(path_to_layout);

          // convert any underscores into dashes
          var the_dir_name = key.replace(/_/g,"-");

          // create the path to file
          var path_to_file = options.dest + '/' + the_dir_name + '/index.html';

          // make the file
          grunt.file.write(path_to_file, layout);
          grunt.log.debug('Created file at ' + path_to_file);

          // get the data for this file 
          var the_data = data_object[key];

          // add any global data to it
          if (global_data) {
            the_data.global = global_data;
            grunt.log.debug('Added global data to data object');
          }          

          // render the template
          render_template(path_to_layout, path_to_file, the_data);  

        }

      } 

    }

    create_html_files(data);
    // END CREATE DIR STRUCTURE AND HTML FILES

    // RENDER THE TEMPLATE
    function render_template(path_to_layout, path_to_file, the_data) {

      grunt.log.debug('PATH TO TEMPLATE IS ' + path_to_file);

      // set the base dir for includes
      // tj uses filename to set base dir for includes in ejs.js
      // which make the include relative to the file
      // see resolveInclude() in visionmedia/ejs/lib/ejs.js
      the_data.filename = path_to_layout;
      grunt.log.debug('THIS DATA FILENAME IS ' + the_data.filename);

      // get the template
      var the_template = grunt.file.read(path_to_layout);
      grunt.log.debug('Read template from ' + path_to_layout);

      // render the template as html
      var the_rendered_template = ejs.render(the_template, the_data);
      grunt.log.debug('Created a rendered template using ' + path_to_file);

      // write the compiled template to the destination directory
      grunt.file.write(path_to_file, the_rendered_template);
      grunt.log.debug('Rendered HTML to ' + path_to_file);



    }
    // END RENDER THE TEMPLATE

  });

};
